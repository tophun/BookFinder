//
//  SearchViewController.swift
//  BookFinder
//
//  Created by Tophun on 2022/06/26.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit
import Then

protocol SearchDisplayLogic: AnyObject {
    func displayError(error: Error)
    func displayLoading()
    func displaySearch(viewModel: Search.Search.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic {
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    private let maxResults: Int = 40
    private var pageable: Bool = false
    private var isResult: Bool = false
    private var resultItems: [Search.Search.ViewModel.ResultModel] = []
    
    lazy var tableView = UITableView(frame: .zero).then {
        $0.dataSource = self
        $0.delegate = self
        $0.backgroundColor = .white
        $0.separatorStyle = .none
        $0.register(SearchResultItemCell.self, forCellReuseIdentifier: String(describing: SearchResultItemCell.self))
    }
    
    private lazy var searchController = UISearchController(searchResultsController: nil).then {
        $0.searchBar.delegate = self
    }
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupLayout()
    }
    
    func search(request: Search.Search.Request) {
        interactor?.search(request: request)
    }
    
    func reset() {
        self.resultItems.removeAll()
        self.isResult = false
        self.tableView.reloadData()
    }
}

extension SearchViewController {
    private func setupView() {
        view.backgroundColor = .white
        navigationItem.title = "Book Finder"
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationController?.navigationItem.largeTitleDisplayMode = .never
        navigationItem.searchController = searchController
    }
    
    private func setupLayout() {
        view.addSubview(tableView)
        tableView.snp.makeConstraints {
            $0.top.equalTo(view.safeAreaLayoutGuide.snp.top)
            $0.leading.trailing.bottom.equalToSuperview()
        }
    }
}

// MARK: - SearchDisplayLogic

extension SearchViewController {
    func displayError(error: Error) {
        let alert = UIAlertController(title: "알림", message: error.localizedDescription, preferredStyle: .alert)
        alert.addAction(.init(title: "확인", style: .default))
        present(alert, animated: true)
    }
    
    func displayLoading() {
        Spinner.show()
    }
    
    func displaySearch(viewModel: Search.Search.ViewModel) {
        Spinner.hidden()
        self.resultItems += viewModel.resultItems
        self.pageable = self.resultItems.count < viewModel.totalItems
        self.isResult = true
        self.tableView.reloadData()
    }
}

// MARK: - UITableViewDataSource & UITableViewDelegate

extension SearchViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        isResult && resultItems.isEmpty ? tableView.noResult("일치하는 검색 결과가 없습니다 :(") : tableView.restore()
        return resultItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: SearchResultItemCell.self), for: indexPath) as? SearchResultItemCell else {
            fatalError("SearchResultItemCell init error")
        }
        
        cell.bind(resultItems[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        // 페이징이 가능하면서 리스트 마지막 아이템에 도달했을때
        if indexPath.row == resultItems.count - 1 && pageable {
            guard let query = searchController.searchBar.text else { return }
            let request = Search.Search.Request(query: query, startIndex: resultItems.count, maxResults: maxResults)
            search(request: request)
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToDetail()
    }
}

// MARK: - UISearchBarDelegate

extension SearchViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let query = searchBar.text, !query.isEmpty else { return }
        reset()
        
        let request = Search.Search.Request(query: query, startIndex: resultItems.count, maxResults: maxResults)
        search(request: request)
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        reset()
    }
}
