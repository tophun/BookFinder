//
//  SearchPresenterTests.swift
//  BookFinder
//
//  Created by Tophun on 2022/06/26.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import BookFinder
import XCTest

class SearchPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SearchPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupSearchPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSearchPresenter() {
        sut = SearchPresenter()
    }
    
    // MARK: Test doubles
    
    class SearchDisplayLogicSpy: SearchDisplayLogic {
        
        var displayLoadingCalled = false
        var displayErrorCalled = false
        var displaySearchCalled = false
        
        func displayLoading() {
            displayLoadingCalled = true
        }
        
        func displayError(error: Error) {
            displayErrorCalled = true
        }
        
        func displaySearch(viewModel: Search.Search.ViewModel) {
            displaySearchCalled = true
        }
    }
    
    // MARK: Tests
    
    func test_ViewModel을만들어서_ViewController로전달() {
        // Given
        let displayLogicSpy = SearchDisplayLogicSpy()
        sut.viewController = displayLogicSpy
        
        // When
        let response = Search.Search.Response(items: [], totalItems: 0)
        sut.presentSearch(response: response)
        
        // Then
        XCTAssert(displayLogicSpy.displaySearchCalled)
    }
    
    func test_API실패하였을때_ViewController로전달() {
        // Given
        let displayLogicSpy = SearchDisplayLogicSpy()
        sut.viewController = displayLogicSpy
        
        // When
        let response = Search.Search.Response(items: [], totalItems: 0, error: URLError(.badServerResponse))
        sut.presentSearch(response: response)
        
        // Then
        XCTAssert(displayLogicSpy.displayErrorCalled)
    }
}
